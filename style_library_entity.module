<?php

/**
 * @file
 * Contains style_library_entity.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;

/**
 * Implements hook_help().
 */
function style_library_entity_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the style_library_entity module.
    case 'help.page.style_library_entity':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a Style Library Entity type for storing css and js resources for themes and modules to use') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function style_library_entity_theme() {
  $theme = [];
  $theme['style_library_entity'] = [
    'render element' => 'elements',
    'file' => 'style_library_entity.page.inc',
    'template' => 'style_library_entity',
  ];
  $theme['style_library_entity_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'style_library_entity.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function style_library_entity_theme_suggestions_style_library_entity(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#style_library_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'style_library_entity__' . $sanitized_view_mode;
  $suggestions[] = 'style_library_entity__' . $entity->bundle();
  $suggestions[] = 'style_library_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'style_library_entity__' . $entity->id();
  $suggestions[] = 'style_library_entity__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function style_library_entity_style_library_entity_delete($style_library) {
  try {
    $style_library_entity_service = \Drupal::service('style_library_entity.service');
    $style_library_entity_service->deleteAdditionalCssFile($style_library);
  }
  catch (Exception $e) {
    \Drupal::logger('style_library_entity')
      ->notice('The additional css file could not be deleted.');
  }
}

/**
 * Implements hook_library_info_build().
 *
 * Setup Drupal "Libraries" for each enabled style library entity.
 */
function style_library_entity_library_info_build() {
  $libraries = [];
  $style_library_entity_service = \Drupal::service('style_library_entity.service');
  $style_libraries = $style_library_entity_service->loadEnabledStyleEntities(TRUE);
  if (!empty($style_libraries)) {
    foreach ($style_libraries as $style_library) {
      $css_urls = $style_library_entity_service->buildCssFileArrayForEntity($style_library);
      if (!empty($css_urls)) {
        foreach ($css_urls as $css_url) {
          $libraries['style-library-entity-' . $style_library->id()]['css']['theme'][$css_url] = [
            'type' => 'external',
            'weight' => $style_library->get('weight')->value,
          ];
        }
      }
      $js_urls = $style_library_entity_service->buildJsFileArrayForEntity($style_library);
      if (!empty($js_urls)) {
        foreach ($js_urls as $js_url) {
          $libraries['style-library-entity-' . $style_library->id()]['js'][$js_url] = [
            'type' => 'external',
            'weight' => $style_library->get('weight')->value,
          ];
        }
      }
    }
  }
  return $libraries;
}

/**
 * Implements hook_css_alter().
 *
 * Set the group of our style library styles so they take precedence the theme.
 */
function style_library_entity_css_alter(&$css, AttachedAssetsInterface $assets) {
  if (!empty($css)) {
    foreach ($css as $name => $c) {
      if (strpos($name, 'style-library-entity') !== FALSE) {
        // Give high group number so that css takes precedence ..
        $css[$name]['group'] = 200;
        // Change type from external to file.
        // This makes the CSS be included in aggregation.
        $css[$name]['type'] = 'file';
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Load global style library entities libraries to the root of the page build.
 */
function style_library_entity_preprocess_html(&$variables) {
  $style_library_entity_service = \Drupal::service('style_library_entity.service');
  $enabled = TRUE;
  $global = TRUE;
  $style_libraries = $style_library_entity_service->loadEnabledStyleEntities($enabled, $global);
  if (!empty($style_libraries)) {
    foreach ($style_libraries as $style_library) {
      $variables['#attached']['library'][] = 'style_library_entity/style-library-entity-' . $style_library->id();
    }
  }
}
